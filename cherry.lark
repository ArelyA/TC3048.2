// REGRESAR A COUNT ORIGINAL
// CORREGIR EXPRESIONES -> Ver ms de Federico
start: (stmt)*
?stmt: asign
  | if_else
  | print
  | for
  | while
  | def_func
  | read
  | call_func
call_func: ID "(" call_func_opt ("," call_func_opt)* ")"
call_func_opt: expresion
  | func_str
  | func_it
block: ("\t"* "\t" stmt "\t"*)+
?asign: asign_simp
  | asign_item
asign_simp: ID EQUAL asign_simp_opt -> asign_simp_func
?asign_simp_opt: var_it
  | expresion
  | var_str
asign_item: ID "[" expresion "]" EQUAL asign_item_opt -> asign_item_func
asign_item_opt: expresion
  |var_str
if_else: "if" "(" expresion ")" ":" block ["else" ":" block]
print: "print" "(" print_opt ("," print_opt)* ")"
print_opt: var_str
  | expresion
read: "read" "(" ID ["," read_opt] ")"
!read_opt: "int"
  | "float"
  | "string"
while: "while" "(" expresion ")" ":" block
for: "for" ID "in" for_opt ":" block
for_opt: var_it_ext
def_func: "def" ID "(" ID ("," ID)* ")" ":" block ["return" def_func_opt]
def_func_opt: expresion
  | var_str
  | var_it
func_cte: len
  | count
  | size
len: "len" "(" len_opt ")"
len_opt: var_it
  | var_str
count: "count"  "(" var_it_ext "," count_opt ")"
count_opt: var_str
  | expresion
size: "size" "(" CTE_FILE ")"
func_str: substr
  | join
  | find
  | norm
  | clean
substr: var_str_ext "[" expresion ":" expresion "]"
join: var_str_ext ".join" "(" var_str ")"
find: var_str_ext ".find" "(" var_str ")"
clean: var_str_ext ".clean" "(" ")"
norm: var_str_ext ".norm" "(" var_str ")"
?var_cte: ID
  | CTE_INT
  | CTE_FLOAT
  | ID "[" expresion "]"
  | func_cte
?var_it: func_it
  | "[" var_it_opt (var_it_opt)* "]"
?var_it_opt: expresion
  | var_str
?var_str: CTE_STRING
  | func_str
  | CTE_FILE
?var_str_ext: var_str
  | ID
?var_it_ext: var_it
  | ID
func_it: range
  | tokenize
  | unigrams
  | bigrams
  | ngrams
  | set
tokenize: var_str_ext "." "tokenize" "(" tokenize_opt? ")"
!tokenize_opt: "word"
  | "sentence"
unigrams: var_str_ext "." "unigrams" "(" ")"
bigrams: var_str_ext "." "bigrams" "(" ")"
ngrams: var_str_ext "." "ngrams" "(" expresion ")"
range: "range" "(" expresion ("," expresion)~0..2 ")"
set: var_str_ext "." "set" "(" ")"
expresion: ass [EXPRESION_OPT ass]
EXPRESION_OPT: "and"
  | "or"
?ass: NOT? comp
NOT: "not"
?comp: exp [COMP_OPT exp]
COMP_OPT: ">"
  | ">="
  | "<"
  | "<="
  | "=="
  | "!="
?exp: term (EXP_OPT term)*
EXP_OPT: "+"
  | "-"
?term: factor (TERM_OPT factor)*
TERM_OPT: "*" | "/"
?factor: "(" expresion ")"
  | [FACTOR_OPT] var_cte -> factor_func
FACTOR_OPT: "+" | "-" 
EQUAL: "="
CTE_FILE: /(\.{0,2}\/){0,1}[\d\w\_\-]+[\d\w\_\-\/]*[\d\w\_\-]+\.txt/
// imports from terminal library
%import common.CNAME -> ID // ID terminal
%import common.ESCAPED_STRING -> CTE_STRING // STRING terminal
%import common.INT -> CTE_INT // INT terminal
%import common.FLOAT -> CTE_FLOAT //FLOAT terminal
WHITESPACE: /[ \f\r\n]/+
%ignore WHITESPACE // Disregard spaces in text
  